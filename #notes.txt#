https://acu.instructuremedia.com/embed/bdf42887-e4d4-4354-b8c5-a4f9418f0434

<iframe width="560px" height="320px" allowfullscreen="true" allow="autoplay *" src="https://acu.instructuremedia.com/embed/bdf42887-e4d4-4354-b8c5-a4f9418f0434" frameborder="0"></iframe>

git remote add origin https://github.com/username/Hello-World.git

/home
/learn
/text
/analytics
/mss
/visualize

/book/Oba/ list studies
/book/Oba/study/n list ...

/book/Oba/study/2/ones
/book/Oba/study/2/variants
/book/Oba/study/2/dendro
/book/Oba/study/2/dendro
/book/Oba/study/2/cluster
/book/Oba/study/2/ones
/book/Oba/study/2/percent
/book/Oba/study/2/ratio


/api
  /ones/:book
  /percent/:book
  /ratio/:book

=====

theot1:
postgresql-lively-64702
Host
    ec2-52-73-155-171.compute-1.amazonaws.com
Database
    ddt34i9v2oopc4
User
    zrommyagzfibuh
Port
    5432
Password
    fe4250b2a5c1dc453f5370d3d8e170d95a7808afbd46e28d4059920313e15c33
URI
    postgres://zrommyagzfibuh:fe4250b2a5c1dc453f5370d3d8e170d95a7808afbd46e28d4059920313e15c33@ec2-52-73-155-171.compute-1.amazonaws.com:5432/ddt34i9v2oopc4
Heroku CLI
    heroku pg:psql postgresql-lively-64702 --app theot






-- create plain SQL dump with certs, S3
-- use password copy/paste
-- 
PGSSLMODE=require PGSSLROOTCERT=/Users/bnr01a/.postgresql/root.key  pg_dump --verbose --format=p --host=ec2-3-217-91-165.compute-1.amazonaws.com --username=yuxmjyiidnrqrh --dbname=d88io1p9647j0s > dumpola.sql

9fa7b8f74a5b5dae3f08b9e43180efc31fae905a4c159a3a01452af85d3226f2

then maybe:
dropdb -h localhost -U postgres local_theot1
createdb -h localhost -U postgres -T template0 local_theot1

and

psql -U postgres
\c local_theot1
\i dumpola.sql


psql "sslmode=require sslrootcert=/Users/bnr01a/.postgresql/root.key user=yuxmjyiidnrqrh password=9fa7b8f74a5b5dae3f08b9e43180efc31fae905a4c159a3a01452af85d3226f2 host=ec2-3-217-91-165.compute-1.amazonaws.com dbname=d88io1p9647j0s"

pg_dump --verbose --format=p --host=ec2-3-217-91-165.compute-1.amazonaws.com --username=yuxmjyiidnrqrh --dbname=d88io1p9647j9s d88io1p9647j0s

pgadmin s3 connection

connection to server at "ec2-3-217-91-165.compute-1.amazonaws.com" (3.217.91.165), port 5432 failed: could not initiate GSSAPI security context: The operation or option is not available: Credential for asked mech-type mech not found in the credential handle connection to server at "ec2-3-217-91-165.compute-1.amazonaws.com" (3.217.91.165), port 5432 failed: SSL error: certificate verify failed


failed: could not initiate GSSAPI security context: The operation or option is not available: Credential for asked mech-type mech not found in the credential handle connection to server a



connection to server at "ec2-3-217-91-165.compute-1.amazonaws.com" (3.217.91.165), port 5432 failed: could not initiate GSSAPI security context: The operation or option is not available: Credential for asked mech-type mech not found in the credential handle connection to server at "ec2-3-217-91-165.compute-1.amazonaws.com" (3.217.91.165), port 5432 failed: SSL error: certificate verify failed connection to server at "ec2-3-217-91-165.compute-1.amazonaws.com" (3.217.91.165), port 5432 failed: FATAL: no pg_hba.conf entry for host "47.218.57.31", user "yuxmjyiidnrqrh", database "d88io1p9647j9s", SSL off






pgadmin ssl required:
and root cert given as in shell command

connection to server at "ec2-3-217-91-165.compute-1.amazonaws.com" (3.217.91.165), port 5432 failed: could not initiate GSSAPI security context: The operation or option is not available: Credential for asked mech-type mech not found in the credential handle connection to server at "ec2-3-217-91-165.compute-1.amazonaws.com" (3.217.91.165), port 5432 failed: SSL error: certificate verify failed


connection to server at "ec2-...compute-1.amazonaws.com" (3...16), port 5432 failed: could not initiate GSSAPI security context: The operation or option is not available: Credential for asked mech-type mech not found in the credential handle connection to server at "ec2-...compute-1.amazonaws.com" (3...16), port 5432 failed: SSL error: certificate verify failed



d88io1p9647j0s=> \d
                      List of relations
 Schema |          Name          |   Type   |     Owner
--------+------------------------+----------+----------------
 public | blee                   | table    | yuxmjyiidnrqrh
 public | cluster                | table    | yuxmjyiidnrqrh
 public | dots                   | table    | yuxmjyiidnrqrh
 public | dots_id_seq            | sequence | yuxmjyiidnrqrh
 public | manuscript             | table    | yuxmjyiidnrqrh
 public | manuscript_description | table    | yuxmjyiidnrqrh
 public | ot_book_study          | table    | yuxmjyiidnrqrh
 public | percent_agreement      | table    | yuxmjyiidnrqrh
 public | r_script               | table    | yuxmjyiidnrqrh
 public | tutorials              | table    | yuxmjyiidnrqrh
 public | tutorials_id_seq       | sequence | yuxmjyiidnrqrh
 public | variants_set           | table    | yuxmjyiidnrqrh
(12 rows)


d88io1p9647j0s=> \d
                      List of relations
 Schema |          Name          |   Type   |     Owner
--------+------------------------+----------+----------------
\copy blee to th_blee.csv with csv header;
\copy cluster                | table    | yuxmjyiidnrqrh
\copy dots to th_dots with csv header;
\copy dots_id_seq to th_dots_id_seq with csv header;
\copy manuscript to th_manuscript with csv header;
\copy manuscript_description to th_manuscript_description with csv header;
\copy ot_book_study to th_ot_book_study with csv header;
\copy percent_agreement to th_percent_agreement with csv header;
\copy r_script to th_r_script with csv header;
\copy tutorials to th_tutorials with csv header;
\copy tutorials_id_seq to th_tutorials_id_seq with csv header;
\copy variants_set to th_variants_set with csv header;
(12 rows)


=====

pg_dump 


local_theot1=# \?
General
  \copyright             show PostgreSQL usage and distribution terms
  \crosstabview [COLUMNS] execute query and display results in crosstab
  \errverbose            show most recent error message at maximum verbosity
  \g [FILE] or ;         execute query (and send results to file or |pipe)
  \gdesc                 describe result of query, without executing it
  \gexec                 execute query, then execute each value in its result
  \gset [PREFIX]         execute query and store results in psql variables
  \gx [FILE]             as \g, but forces expanded output mode
  \q                     quit psql
  \watch [SEC]           execute query every SEC seconds

Help
  \? [commands]          show help on backslash commands
  \? options             show help on psql command-line options
  \? variables           show help on special variables
  \h [NAME]              help on syntax of SQL commands, * for all commands

Query Buffer
  \e [FILE] [LINE]       edit the query buffer (or file) with external editor
  \ef [FUNCNAME [LINE]]  edit function definition with external editor
  \ev [VIEWNAME [LINE]]  edit view definition with external editor
  \p                     show the contents of the query buffer
  \r                     reset (clear) the query buffer
  \s [FILE]              display history or save it to file
  \w FILE                write query buffer to file

Input/Output
  \copy ...              perform SQL COPY with data stream to the client host
  \echo [STRING]         write string to standard output
  \i FILE                execute commands from file
  \ir FILE               as \i, but relative to location of current script
  \o [FILE]              send all query results to file or |pipe
  \qecho [STRING]        write string to query output stream (see \o)

Conditional
  \if EXPR               begin conditional block
  \elif EXPR             alternative within current conditional block
  \else                  final alternative within current conditional block
  \endif                 end conditional block

Informational
  (options: S = show system objects, + = additional detail)
  \d[S+]                 list tables, views, and sequences
  \d[S+]  NAME           describe table, view, sequence, or index
  \da[S]  [PATTERN]      list aggregates
  \dA[+]  [PATTERN]      list access methods
  \db[+]  [PATTERN]      list tablespaces
  \dc[S+] [PATTERN]      list conversions
  \dC[+]  [PATTERN]      list casts
  \dd[S]  [PATTERN]      show object descriptions not displayed elsewhere
  \dD[S+] [PATTERN]      list domains
  \ddp    [PATTERN]      list default privileges
  \dE[S+] [PATTERN]      list foreign tables
  \det[+] [PATTERN]      list foreign tables
  \des[+] [PATTERN]      list foreign servers
  \deu[+] [PATTERN]      list user mappings
  \dew[+] [PATTERN]      list foreign-data wrappers
  \df[anptw][S+] [PATRN] list [only agg/normal/procedures/trigger/window] functions
  \dF[+]  [PATTERN]      list text search configurations
  \dFd[+] [PATTERN]      list text search dictionaries
  \dFp[+] [PATTERN]      list text search parsers
  \dFt[+] [PATTERN]      list text search templates
  \dg[S+] [PATTERN]      list roles
  \di[S+] [PATTERN]      list indexes
  \dl                    list large objects, same as \lo_list
  \dL[S+] [PATTERN]      list procedural languages
  \dm[S+] [PATTERN]      list materialized views
  \dn[S+] [PATTERN]      list schemas
  \do[S+] [PATTERN]      list operators
  \dO[S+] [PATTERN]      list collations
  \dp     [PATTERN]      list table, view, and sequence access privileges
  \dP[itn+] [PATTERN]    list [only index/table] partitioned relations [n=nested]
  \drds [PATRN1 [PATRN2]] list per-database role settings
  \dRp[+] [PATTERN]      list replication publications
  \dRs[+] [PATTERN]      list replication subscriptions
  \ds[S+] [PATTERN]      list sequences
  \dt[S+] [PATTERN]      list tables
  \dT[S+] [PATTERN]      list data types
  \du[S+] [PATTERN]      list roles
  \dv[S+] [PATTERN]      list views
  \dx[+]  [PATTERN]      list extensions
  \dy[+]  [PATTERN]      list event triggers
  \l[+]   [PATTERN]      list databases
  \sf[+]  FUNCNAME       show a function's definition
  \sv[+]  VIEWNAME       show a view's definition
  \z      [PATTERN]      same as \dp

Formatting
  \a                     toggle between unaligned and aligned output mode
  \C [STRING]            set table title, or unset if none
  \f [STRING]            show or set field separator for unaligned query output
  \H                     toggle HTML output mode (currently off)
  \pset [NAME [VALUE]]   set table output option
                         (border|columns|csv_fieldsep|expanded|fieldsep|
                         fieldsep_zero|footer|format|linestyle|null|
                         numericlocale|pager|pager_min_lines|recordsep|
                         recordsep_zero|tableattr|title|tuples_only|
                         unicode_border_linestyle|unicode_column_linestyle|
                         unicode_header_linestyle)
  \t [on|off]            show only rows (currently off)
  \T [STRING]            set HTML <table> tag attributes, or unset if none
  \x [on|off|auto]       toggle expanded output (currently off)

Connection
  \c[onnect] {[DBNAME|- USER|- HOST|- PORT|-] | conninfo}
                         connect to new database (currently "local_theot1")
  \conninfo              display information about current connection
  \encoding [ENCODING]   show or set client encoding
  \password [USERNAME]   securely change the password for a user

Operating System
  \cd [DIR]              change the current working directory
  \setenv NAME [VALUE]   set or unset environment variable
  \timing [on|off]       toggle timing of commands (currently off)
  \! [COMMAND]           execute command in shell or start interactive shell

Variables
  \prompt [TEXT] NAME    prompt user to set internal variable
  \set [NAME [VALUE]]    set internal variable, or list all if no parameters
  \unset NAME            unset (delete) internal variable

Large Objects
  \lo_export LOBOID FILE
  \lo_import FILE [COMMENT]
  \lo_list
  \lo_unlink LOBOID      large object operations


brew install postgresql

To migrate existing data from a previous major version of PostgreSQL run:
  brew postgresql-upgrade-database

This formula has created a default database cluster with:
  initdb --locale=C -E UTF-8 /usr/local/var/postgres
For more details, read:
  https://www.postgresql.org/docs/14/app-initdb.html

To restart postgresql after an upgrade:
  brew services restart postgresql
Or, if you don't want/need a background service you can just run:
  /usr/local/opt/postgresql/bin/postgres -D /usr/local/var/postgres
==> openssl@3
A CA file has been bootstrapped using certificates from the system
keychain. To add additional certificates, place .pem files in
  /usr/local/etc/openssl@3/certs

and run
  /usr/local/opt/openssl@3/bin/c_rehash

openssl@3 is keg-only, which means it was not symlinked into /usr/local,
because macOS provides LibreSSL.

If you need to have openssl@3 first in your PATH, run:
  echo 'export PATH="/usr/local/opt/openssl@3/bin:$PATH"' >> ~/.zshrc

For compilers to find openssl@3 you may need to set:
  export LDFLAGS="-L/usr/local/opt/openssl@3/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl@3/include"

For pkg-config to find openssl@3 you may need to set:
  export PKG_CONFIG_PATH="/usr/local/opt/openssl@3/lib/pkgconfig"


=====




app/db/

local_theot1=# \d ot_book_study;
               Table "public.ot_book_study"
    Column     |  Type   | Collation | Nullable | Default
---------------+---------+-----------+----------+---------
 ot_book       | text    |           | not null |
 study_no      | integer |           | not null |
 description   | text    |           | not null |
 date_created  | text    |           | not null |
 mss_used      | text[]  |           | not null |
 tvus          | text[]  |           | not null |
 google_ss_url | text    |           | not null |
 notes         | text    |           |          |
Indexes:
    "ot_book_study_pkey" PRIMARY KEY, btree (ot_book, study_no)
    

'Sat Jan 29 2022 08:12:01 GMT-0800 (Pacific Standard Time)'
